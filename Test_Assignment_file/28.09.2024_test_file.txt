Q1. You are given a sorted array of integers. Write a function to find a target element in the array. If the target exists,
    return its index; otherwise, return -1. Time complexity(logn)

Ans. #include <bits/stdc++.h>
using namespace std;

int getIndex(vector<int> &arr, int t)
{
    int low = 0, high = arr.size() - 1;
    while (low <= high)
    {
        int mid = low + (high - low) / 2;

        if (arr[mid] == t)
        {
            return mid;
        }
        else if (arr[mid] < t)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return -1;
}

int main()
{
    vector<int> arr{1, 2, 3, 4, 5, 6};
    int target = 5;

    int get_index_of_target = getIndex(arr, target);

    if (get_index_of_target != -1)
    {
        cout << "Index of target element is " << get_index_of_target;
    }
    else
    {
        cout << get_index_of_target;
    }

    return 0;
}

Q2. Given a sorted array of integers, find the first occurrence of a target element. If the target exists, return its
    index; otherwise, return -1.Time complexity(logn)

Ans. #include <bits/stdc++.h>
using namespace std;

int getIndex(vector<int> &arr, int t)
{
    int low = 0, high = arr.size() - 1;
    int result = -1;
    while (low <= high)
    {
        int mid = low + (high - low) / 2;

        if (arr[mid] == t)
        {
            result = mid;
            high = mid - 1;
        }
        else if (arr[mid] < t)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }

    return result;
}

int main()
{
    vector<int> arr{1, 2, 3, 4, 5, 5, 6};
    int target = 5;

    int get_first_Occurrence_index_of_target = getIndex(arr, target);

    if (get_first_Occurrence_index_of_target != -1)
    {
        cout << "Index of target element is " << get_first_Occurrence_index_of_target;
    }
    else
    {
        cout << get_first_Occurrence_index_of_target;
    }

    return 0;
}
Q3. An array of integers is "bitonic" (first increasing, then decreasing). Find the peak element in this bitonic array.
    Return the index of the peak element.Time complexity(logn)

Ans.#include <bits/stdc++.h>
using namespace std;

int getIndex(vector<int> &arr)
{
    int low = 0, high = arr.size() - 1;

    while (low < high)
    {
        int mid = low + (high - low) / 2;

        if (arr[mid] > arr[mid + 1])
        {
            high = mid;
        }
        else
        {
            low = mid + 1;
        }
    }

    return low;
}

int main()
{
    vector<int> arr{1, 3, 5, 4, 2};

    int index_peak_el = getIndex(arr);

    if (index_peak_el != -1)
    {
        cout << "Index of Peak Element of array is " << index_peak_el;
    }
    else
    {
        cout << index_peak_el;
    }

    return 0;
}

Q4. Given a positive integer x, find the integer square root of x. Return the largest integer y such that y * y <= x.
    Time complexity(logn)

Ans.#include <bits/stdc++.h>
using namespace std;

int getSqrt(int x)
{
    if (x == 0 || x == 1)
    {
        return x;
    }

    int low = 0, high = x;

    while (low <= high)
    {
        int mid = low + (high - low) / 2;

        long long square = mid * mid;
        if (square == x)
        {
            return mid;
        }
        else if (square < x)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return high;
}

int main()
{
    int x = 16;

    int sqrt_x = getSqrt(x);

    cout << "The Square Root of " << x << " is " << sqrt_x;

    return 0;
}

Q5. Given an array of integers, write a function to find the maximum element in the array.Time complexity(n) 

Ans.#include <bits/stdc++.h>
using namespace std;

int getMax(vector<int> arr)
{
    int max = arr[0];

    for (auto el : arr)
    {
        if (el > max)
        {
            max = el;
        }
    }
    return max;
}

int main()
{
    vector<int> arr{15, 17, 5, 89, 4};

    int max_Value = getMax(arr);

    cout << max_Value;

    return 0;
}

Q6. Given an array of integers, write a function that counts how many times a target element appears in the array. Time Complexity( o (n) )

Ans.#include <bits/stdc++.h>
using namespace std;

int get_Occurrence(vector<int> arr, int t)
{
    int count = 0;

    for (int i = 0; i < arr.size(); i++)
    {
        if (arr[i] == t)
        {
            count++;
        }
    }

    return count;
}

int main()
{
    vector<int> arr{15, 17, 2, 2, 17, 4};
    int target = 2;

    int num_of_occurrence = get_Occurrence(arr, target);

    cout << target << " Occurs " << num_of_occurrence << " times.";

    return 0;
}

Q7. You are given an array of integers and a value x. Write a function to find and return all elements in the array that are greater than x.
    Time Complexity( o (n) )

Ans.#include <bits/stdc++.h>
using namespace std;

int get_Greater_ele(int ele, int tar)
{
    if (ele > tar)
    {
        return ele;
    }
    return -1;
}

int main()
{
    vector<int> arr{15, 17, 2, 18, 4};
    int target = 4;
    int index;

    for (auto el : arr)
    {
        index = get_Greater_ele(el, target);
        if (index != -1)
        {
            cout << get_Greater_ele(el, target) << " ";
        }
    }

    return 0;
}

Q8. Given an unsorted array of integers, find the smallest positive integer that is missing from the array. Time complexity (o(n))

Ans.#include <bits/stdc++.h>
using namespace std;

int getMissingVal(vector<int> &arr)
{
    sort(arr.begin(), arr.end());

    int first_positive_num = arr[0];

    for (auto val : arr)
    {
        if (val < 0)
        {
            continue;
            ;
        }
        else
        {
            first_positive_num = val;
            break;
        }
    }

    int count = first_positive_num;

    for (auto it : arr)
    {
        if (it > 0 && count != it)
        {
            break;
        }
        count++;
    }

    return count;
}

int main()
{
    vector<int> arr{3, 4, -1, 1};
    int missing_num = getMissingVal(arr);

    cout << "Missing value is " << missing_num;

    return 0;
}

Q9. Given an unsorted array of integers, implement the Bubble Sort algorithm if user press 1 and selection sort if user
    press 2 to sort the array in ascending order.
Ans. #include <bits/stdc++.h>
using namespace std;

void doSelectionSort(vector<int> &arr)
{
    for (int i = 0; i < arr.size() - 1; i++)
    {
        int minIndex = i;
        for (int j = i + 1; j < arr.size(); j++)
        {
            if (arr[minIndex] > arr[j])
            {
                minIndex = j;
            }
        }
        swap(arr[i], arr[minIndex]);
    }
}

void doBubbleSort(vector<int> &arr)
{
    for (int i = 0; i < arr.size(); i++)
    {
        for (int j = 0; j < arr.size() - 1; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

int main()
{
    vector<int> arr{64, 25, 12, 22, 11};

    int num;
    cout << "Press 1 for Apply Selection Sort or Press 2 for Bubble Sort: ";
    cin >> num;

    if (num == 1)
    {
        doSelectionSort(arr);
    }
    else
    {
        doBubbleSort(arr);
    }

    for (auto ele : arr)
    {
        cout << ele << "  ";
    }
    return 0;
}

Q10.

Ans.